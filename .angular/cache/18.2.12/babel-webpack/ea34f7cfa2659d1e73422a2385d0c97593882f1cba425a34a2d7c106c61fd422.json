{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jose/Desktop/Entregable_3_clean-f74757819f7f6b4c39391c8f8c895bd82e53ce10/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\nimport * as _jsQR from './jsqr.js';\nconst jsQR = _jsQR.default || _jsQR;\nexport class BarcodeScannerWeb extends WebPlugin {\n  multiScan(opts) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const scans = yield _this.readInternal(opts.maxScans);\n      if (scans.length > 0) {\n        return {\n          result: true,\n          codes: scans,\n          count: scans.length\n        };\n      } else {\n        return {\n          result: false,\n          count: 0,\n          codes: []\n        };\n      }\n    })();\n  }\n  scan() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const scans = yield _this2.readInternal();\n      if (scans.length > 0) {\n        return {\n          result: true,\n          code: scans[0]\n        };\n      } else {\n        return {\n          result: false\n        };\n      }\n    })();\n  }\n  readInternal(reads = 1) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const fInput = document.createElement('input');\n      fInput.type = 'file';\n      fInput.accept = 'image/*';\n      if (reads > 1) {\n        fInput.multiple = true;\n      }\n      fInput.style.display = 'none';\n      document.body.appendChild(fInput);\n      const promise = new Promise(resolve => {\n        fInput.addEventListener('change', /*#__PURE__*/_asyncToGenerator(function* () {\n          try {\n            if (fInput.files && fInput.files.length > 0) {\n              const scans = [];\n              const min = Math.min(fInput.files.length, reads);\n              for (let i = 0; i < min; i++) {\n                const img = fInput.files[i];\n                const imgData = yield _this3.blobToImageData(img);\n                const code = jsQR(imgData.data, imgData.width, imgData.height);\n                //console.log(code);\n                if (code && code.data) {\n                  scans.push(code.data);\n                } else {\n                  console.error('jsQR return null', code);\n                }\n              }\n              resolve(scans);\n            } else {\n              resolve([]);\n            }\n          } catch (error) {\n            console.error(error);\n          }\n          document.body.removeChild(fInput);\n        }));\n      });\n      fInput.click();\n      return promise;\n    })();\n  }\n  blobToImageData(blob, maxWidth = 1500, maxHeight = 1500) {\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(blob);\n        reader.onloadend = () => {\n          const image = new Image();\n          image.src = reader.result;\n          image.onload = () => {\n            const scale = Math.min(maxWidth / image.width, maxHeight / image.height, 1);\n            const canvas = document.createElement('canvas');\n            canvas.width = image.width * scale;\n            canvas.height = image.height * scale;\n            const ctx = canvas.getContext('2d');\n            ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n            // Libera la memoria de la imagen y del canvas\n            canvas.width = 0;\n            canvas.height = 0;\n            resolve(imageData);\n          };\n          image.onerror = e => reject(new Error(\"Error al cargar la imagen.\" + e));\n        };\n        reader.onerror = e => reject(new Error(\"Error al leer el blob.\" + e));\n      });\n    })();\n  }\n}\n//# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}