{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jose/Desktop/Entregable_3_clean/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(afAuth, firestore) {\n      this.afAuth = afAuth;\n      this.firestore = firestore;\n    }\n    // Método para verificar si el usuario está autenticado\n    isAuthenticated() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const user = yield _this.afAuth.currentUser;\n        return user !== null;\n      })();\n    }\n    // Método para guardar datos adicionales en Firestore\n    saveUserData(uid, data) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        return _this2.firestore.collection('users').doc(uid).set(data);\n      })();\n    }\n    // Método para iniciar sesión\n    login(email, password) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        return _this3.afAuth.signInWithEmailAndPassword(email, password);\n      })();\n    }\n    // Método para registrar usuario\n    register(email, password) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        return _this4.afAuth.createUserWithEmailAndPassword(email, password);\n      })();\n    }\n    // Método para obtener los datos del usuario como Observable\n    getUserData() {\n      return new Observable(observer => {\n        this.afAuth.currentUser.then(user => {\n          if (user) {\n            this.firestore.collection('users').doc(user.uid).valueChanges().subscribe(data => {\n              if (data) {\n                observer.next(data);\n              } else {\n                observer.error(new Error('No se encontraron datos para este usuario.'));\n              }\n            }, error => observer.error(error));\n          } else {\n            observer.error(new Error('No hay usuario autenticado'));\n          }\n        });\n      });\n    }\n    // Método para cambiar la contraseña \n    cambiarContrasena(nuevaContrasena) {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        const user = yield _this5.afAuth.currentUser;\n        if (user) {\n          yield user.updatePassword(nuevaContrasena);\n          console.log('Contraseña cambiada exitosamente.');\n        } else {\n          throw new Error('No hay usuario autenticado para cambiar la contraseña.');\n        }\n      })();\n    }\n    logout() {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this6.afAuth.signOut(); // Cierra sesión en Firebase\n          console.log('Sesión cerrada exitosamente.');\n        } catch (error) {\n          console.error('Error al cerrar sesión:', error);\n          throw error; // Propaga el error para manejarlo en el componente\n        }\n      })();\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}